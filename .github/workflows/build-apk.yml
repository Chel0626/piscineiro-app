name: Build Android APK

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Permite executar manualmente

jobs:
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install dependencies
      run: |
        npm ci
        cd functions && npm ci

    - name: Create .env.local for build
      run: |
        echo "# Build environment" > .env.local
        echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env.local
        echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}" >> .env.local
        echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env.local
        echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}" >> .env.local
        echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}" >> .env.local
        echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}" >> .env.local
        echo "NEXT_PUBLIC_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> .env.local

    - name: Build mobile app
      run: npm run build:mobile

    - name: Sync Capacitor
      run: npx cap sync android

    - name: Update version in Android
      run: node scripts/update-version.js

    - name: Grant execute permission for gradlew
      run: chmod +x android/gradlew

    - name: Build unsigned APK
      run: |
        cd android
        ./gradlew assembleDebug

    - name: Get version
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=${{ github.run_number }}" >> $GITHUB_OUTPUT

    - name: Rename APK
      run: |
        mkdir -p release
        cp android/app/build/outputs/apk/debug/app-debug.apk release/piscineiro-app-v${{ steps.version.outputs.version }}-build${{ steps.version.outputs.build_number }}.apk

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: piscineiro-apk
        path: release/piscineiro-app-v${{ steps.version.outputs.version }}-build${{ steps.version.outputs.build_number }}.apk

    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}-build${{ steps.version.outputs.build_number }}
        name: Piscineiro App v${{ steps.version.outputs.version }} (Build ${{ steps.version.outputs.build_number }})
        body: |
          ğŸš€ **Nova versÃ£o do Piscineiro App!**
          
          ğŸ“± **APK Android**: Baixe e instale no seu dispositivo
          
          ### ğŸ“‹ InformaÃ§Ãµes da Build:
          - **VersÃ£o**: v${{ steps.version.outputs.version }}
          - **Build**: #${{ steps.version.outputs.build_number }}
          - **Commit**: ${{ github.sha }}
          - **Data**: ${{ github.event.head_commit.timestamp }}
          
          ### ğŸ“¥ Como instalar:
          1. Baixe o arquivo APK abaixo
          2. Ative "Fontes desconhecidas" no Android
          3. Instale o APK
          
          ### âœ¨ Novidades desta versÃ£o:
          ${{ github.event.head_commit.message }}
        files: |
          release/piscineiro-app-v${{ steps.version.outputs.version }}-build${{ steps.version.outputs.build_number }}.apk
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}